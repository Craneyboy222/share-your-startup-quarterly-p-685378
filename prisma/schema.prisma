/* Complete Prisma schema */

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String
  role         String
  startups     Startup[]
  comments     Comment[]
  votes        Vote[]
  notifications Notification[]
  @@index([email])
}

model Startup {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  name      String
  url       String
  location  String
  stage     String
  goals     String
  discount  String?
  createdAt DateTime @default(now())
  comments  Comment[]
  votes     Vote[]
  discountCodes Discount[]
  @@index([name])
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  startup   Startup  @relation(fields: [startupId], references: [id])
  startupId Int
  content   String
  createdAt DateTime @default(now())
}

model Vote {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  startup   Startup  @relation(fields: [startupId], references: [id])
  startupId Int
  voteType  String
  @@unique([userId, startupId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  type      String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Discount {
  id          Int      @id @default(autoincrement())
  startup     Startup  @relation(fields: [startupId], references: [id])
  startupId   Int
  code        String   @unique
  description String
  expiryDate  DateTime
}